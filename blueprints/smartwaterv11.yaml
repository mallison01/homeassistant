blueprint:
  name: Smart Multi-Zone Irrigation with Weather & Soil Monitoring
  description: >
    🌱 Comprehensive smart irrigation system supporting up to 4 configurable zones
    with weather monitoring, soil moisture detection, and water source management. Features automatic rain/moisture detection,
    pump control, water consumption tracking, and notifications. Supports both parallel and sequential watering modes
    with manual override capabilities. Zones 2-4 are optional and can be disabled.
  domain: automation
  homeassistant:
    min_version: "2024.6.0"
    
  input:
    zone_config:
        name: 🌿 Zone Configuration
        description: Configure irrigation zones, valves, and watering durations for up to 4 zones.
        collapsed: False
        input:
          zone1_valves:
            name: 🌿 Zone 1 Valves (Valve or Switch)
            description: "Select one or more switch/valve entities that control Zone 1 irrigation. These will be activated together when Zone 1 watering is triggered."
            default: []
            selector:
              entity:
                multiple: true
                filter:
                  - domain: switch
                  - domain: valve

          enable_manual_zone1:
            name: 🎮 Enable Manual Zone 1 Control
            description: "Enable manual control for Zone 1. Creates input select to manually start/stop Zone 1."
            default: false
            selector:
              boolean: {}

          manual_zone1_select:
            name: 🌿 Manual Zone 1 Control (Input Select)
            description: "Input select entity for manual Zone 1 control. Should have options like 'Stop' and 'Start' to allow manual activation of Zone 1 watering."
            selector:
              entity:
                domain: input_select

          manual_zone1_duration:
            name: 🌿 Manual Zone 1 Duration (Minutes, 0 = automatic)
            description: "Duration in minutes for Zone 1 watering. Set to 0 to use automatic duration (10 minutes default), or specify custom duration."
            default: 0
            selector:
              number:
                min: 0
                max: 120

          enable_zone2:
            name: 🌿 Enable Zone 2
            description: "Enable Zone 2 irrigation. If disabled, Zone 2 will be completely ignored in all operations."
            default: false
            selector:
              boolean: {}

          zone2_valves:
            name: 🌿 Zone 2 Valves (Valve or Switch)
            description: "Select one or more switch/valve entities that control Zone 2 irrigation. These will be activated together when Zone 2 watering is triggered."
            default: []
            selector:
              entity:
                multiple: true
                filter:
                  - domain: switch
                  - domain: valve

          enable_manual_zone2:
            name: 🎮 Enable Manual Zone 2 Control
            description: "Enable manual control for Zone 2. Creates input select to manually start/stop Zone 2."
            default: false
            selector:
              boolean: {}

          manual_zone2_select:
            name: 🌿 Manual Zone 2 Control (Entity ID)
            description: "Entity ID for manual Zone 2 control input_select. Should have options like 'Stop' and 'Start'."
            default: ""
            selector:
              text: {}

          manual_zone2_duration:
            name: 🌿 Manual Zone 2 Duration (Minutes, 0 = automatic)
            description: "Duration in minutes for Zone 2 watering. Set to 0 to use automatic duration (5 minutes default), or specify custom duration."
            default: 0
            selector:
              number:
                min: 0
                max: 120

          enable_zone3:
            name: 🌿 Enable Zone 3
            description: "Enable Zone 3 irrigation. If disabled, Zone 3 will be completely ignored in all operations."
            default: false
            selector:
              boolean: {}

          zone3_valves:
            name: 🌿 Zone 3 Valves (Valve or Switch)
            description: "Select one or more switch/valve entities that control Zone 3 irrigation. These will be activated together when Zone 3 watering is triggered."
            default: []
            selector:
              entity:
                multiple: true
                filter:
                  - domain: switch
                  - domain: valve

          enable_manual_zone3:
            name: 🎮 Enable Manual Zone 3 Control
            description: "Enable manual control for Zone 3. Creates input select to manually start/stop Zone 3."
            default: false
            selector:
              boolean: {}

          manual_zone3_select:
            name: 🌿 Manual Zone 3 Control (Entity ID)
            description: "Entity ID for manual Zone 3 control input_select. Should have options like 'Stop' and 'Start'."
            default: ""
            selector:
              text: {}

          manual_zone3_duration:
            name: 🌿 Manual Zone 3 Duration (Minutes, 0 = automatic)
            description: "Duration in minutes for Zone 3 watering. Set to 0 to use automatic duration (5 minutes default), or specify custom duration."
            default: 0
            selector:
              number:
                min: 0
                max: 120

          enable_zone4:
            name: 🌿 Enable Zone 4
            description: "Enable Zone 4 irrigation. If disabled, Zone 4 will be completely ignored in all operations."
            default: false
            selector:
              boolean: {}

          zone4_valves:
            name: 🌿 Zone 4 Valves (Valve or Switch)
            description: "Select one or more switch/valve entities that control Zone 4 irrigation. These will be activated together when Zone 4 watering is triggered."
            default: []
            selector:
              entity:
                multiple: true
                filter:
                  - domain: switch
                  - domain: valve

          enable_manual_zone4:
            name: 🎮 Enable Manual Zone 4 Control
            description: "Enable manual control for Zone 4. Creates input select to manually start/stop Zone 4."
            default: false
            selector:
              boolean: {}

          manual_zone4_select:
            name: 🌿 Manual Zone 4 Control (Entity ID)
            description: "Entity ID for manual Zone 4 control input_select. Should have options like 'Stop' and 'Start'."
            default: ""
            selector:
              text: {}

          manual_zone4_duration:
            name: 🌿 Manual Zone 4 Duration (Minutes, 0 = automatic)
            description: "Duration in minutes for Zone 4 watering. Set to 0 to use automatic duration (7 minutes default), or specify custom duration."
            default: 0
            selector:
              number:
                min: 0
                max: 120

          parallel_watering:
            name: 🤖 Irrigation Mode - Parallel or Sequential?
            description: "Choose watering mode. True = Parallel (all enabled zones water simultaneously), False = Sequential (enabled zones water one after another with individual durations)."
            default: false
            selector:
              boolean: {}

    fixed_time_schedule:
        name: ⏰ Fixed Time Schedules
        description: Configure fixed time schedules for automatic watering.
        collapsed: true
        input:
          enable_fixed_time1:
            name: ⏰ Enable Fixed Time 1
            description: "Enable first fixed time schedule."
            default: true
            selector:
              boolean: {}

          fixed_time1:
            name: ⏰ Fixed Start Time 1
            description: "First fixed time to start automatic watering. Format: HH:MM (24-hour format)."
            default: "06:00:00"
            selector:
              time: {}

          enable_fixed_time2:
            name: ⏰ Enable Fixed Time 2
            description: "Enable second fixed time schedule."
            default: false
            selector:
              boolean: {}

          fixed_time2:
            name: ⏰ Fixed Start Time 2
            description: "Second fixed time to start automatic watering. Format: HH:MM (24-hour format)."
            default: "18:00:00"
            selector:
              time: {}

          enable_fixed_time3:
            name: ⏰ Enable Fixed Time 3
            description: "Enable third fixed time schedule."
            default: false
            selector:
              boolean: {}

          fixed_time3:
            name: ⏰ Fixed Start Time 3
            description: "Third fixed time to start automatic watering. Format: HH:MM (24-hour format)."
            default: "12:00:00"
            selector:
              time: {}

    sun_schedule:
        name: 🌅 Sun-Based Schedules
        description: Configure sunrise and sunset based schedules.
        collapsed: true
        input:
          enable_sunrise:
            name: 🌅 Enable Sunrise Schedule
            description: "Enable sunrise-based watering schedule."
            default: false
            selector:
              boolean: {}

          sunrise_offset:
            name: ⏰ Sunrise Offset (Minutes)
            description: "Time offset in minutes for sunrise scheduling. Positive values = later (after sunrise), negative values = earlier (before sunrise)."
            default: 30
            selector:
              number:
                min: -120
                max: 120

          enable_sunset:
            name: 🌅 Enable Sunset Schedule
            description: "Enable sunset-based watering schedule."
            default: false
            selector:
              boolean: {}

          sunset_offset:
            name: ⏰ Sunset Offset (Minutes)
            description: "Time offset in minutes for sunset scheduling. Positive values = later (after sunset), negative values = earlier (before sunset)."
            default: -30
            selector:
              number:
                min: -120
                max: 120

    schedule_helper:
        name: 📅 Schedule Helper
        description: Use Home Assistant schedule helpers for advanced scheduling.
        collapsed: true
        input:
          enable_schedule_helper:
            name: 📅 Enable Schedule Helper
            description: "Enable schedule helper integration for advanced scheduling."
            default: false
            selector:
              boolean: {}

          create_schedule_helper:
            name: 📅 Create Schedule Helper
            description: "Automatically create a schedule helper entity for advanced scheduling. This will create 'schedule.irrigation_schedule' that you can configure in the UI."
            default: false
            selector:
              boolean: {}

          existing_schedule_helper:
            name: 📅 Existing Schedule Helper (Entity ID)
            description: "Entity ID of existing schedule helper entity."
            default: ""
            selector:
              text: {}

    weather_soil:
        name: 🌧️ Weather & Soil Monitoring
        description: Configure sensors that monitor weather and soil conditions to prevent unnecessary watering.
        collapsed: true
        input:
          enable_soil_moisture:
            name: 💧 Enable Soil Moisture Monitoring
            description: "Enable automatic soil moisture checking before watering."
            default: false
            selector:
              boolean: {}

          soil_moisture_sensor:
            name: 💧 Soil Moisture Sensor (Entity ID)
            description: "Entity ID of sensor that reports soil moisture percentage (0-100%)."
            default: ""
            selector:
              text: {}

          soil_moisture_threshold:
            name: 💧 Soil Moisture Threshold (%)
            description: "Skip watering if soil moisture percentage is above this value. Typical values are 30-50% depending on plant needs."
            default: 30
            selector:
              number:
                min: 0
                max: 100

          enable_rain_amount:
            name: 🌧️ Enable Rain Amount Monitoring
            description: "Enable checking recent rainfall amounts before watering."
            default: false
            selector:
              boolean: {}

          rain_amount_sensor:
            name: 🌧️ Rain Amount Sensor (Entity ID)
            description: "Entity ID of sensor that reports rainfall amount in inches."
            default: ""
            selector:
              text: {}

          rain_threshold:
            name: 🌧️ Rain Amount Threshold (inches)
            description: "Skip watering if recent rainfall amount exceeds this threshold in inches."
            default: 0.4
            selector:
              number:
                min: 0
                max: 4

          enable_rain_detection:
            name: 🌧️ Enable Live Rain Detection
            description: "Enable live rain detection to stop watering immediately when rain is detected."
            default: false
            selector:
              boolean: {}

          rain_live_sensor:
            name: 🌧️ Rain Detection Sensor (Entity ID)
            description: "Entity ID of binary sensor that detects active rain."
            default: ""
            selector:
              text: {}

    water_source_pump:
        name: 💧 Water Source & Pump Control
        description: Configure water source, pump control, and water level monitoring.
        collapsed: true
        input:
          water_source:
            name: 💧 Select Water Source
            description: "Choose your water source. Select 'Tap Water' for unlimited mains water supply, or 'Rainwater/Cistern' for tank-based systems with level monitoring."
            default: "tap_water"
            selector:
              select:
                options:
                  - label: Tap Water (Unlimited Supply)
                    value: tap_water
                  - label: Rainwater / Cistern (Tank-based)
                    value: rainwater

          enable_water_level:
            name: 🪣 Enable Water Level Monitoring
            description: "Enable water level monitoring for rainwater/cistern systems."
            default: false
            selector:
              boolean: {}

          water_level_sensor:
            name: 🪣 Water Level Sensor (Entity ID)
            description: "Entity ID of sensor that reports water tank level."
            default: ""
            selector:
              text: {}

          min_water_level:
            name: 🪣 Minimum Water Level for Pump Activation
            description: "Minimum water level required to activate the pump (only relevant for rainwater/cistern). Units should match your water level sensor."
            default: 100
            selector:
              number:
                min: 0
                max: 50000

          enable_pump:
            name: ⚡ Enable Pump Control
            description: "Enable automatic pump control before and after watering."
            default: false
            selector:
              boolean: {}

          pump:
            name: ⚡ Pump Switch (Entity ID)
            description: "Entity ID of switch that controls irrigation pump."
            default: ""
            selector:
              text: {}

          pump_delay:
            name: ⚡ Pump Delay (Seconds)
            description: "Delay in seconds after starting the pump before opening valves. This allows the pump to build up pressure."
            default: 5
            selector:
              number:
                min: 1
                max: 60

    water_consumption:
        name: 📊 Water Consumption Tracking
        description: Optional water usage calculation and reporting features.
        collapsed: true
        input:
          enable_water_consumption:
            name: 📊 Enable Water Consumption Tracking
            description: "Enable automatic calculation and notification of water usage after each watering cycle."
            default: false
            selector:
              boolean: {}

          water_consumption_per_minute:
            name: 📊 Water Consumption per Minute (Gallons)
            description: "Average water consumption rate in gallons per minute for all zones combined. Used to calculate total water usage."
            default: 2.0
            selector:
              number:
                min: 0
                max: 100
                step: 0.1

trigger:
  - platform: time
    at: !input fixed_time1
    id: fixed_time1
  - platform: time
    at: !input fixed_time2
    id: fixed_time2
  - platform: time
    at: !input fixed_time3
    id: fixed_time3
  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: sunset
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: sunrise
  - platform: time_pattern
    minutes: '/1'
    id: manual_check

variables:
  water_source: !input water_source
  min_level: !input min_water_level
  zones_zone1: !input zone1_valves
  zones_zone2: !input zone2_valves
  zones_zone3: !input zone3_valves
  zones_zone4: !input zone4_valves
  enable_zone2: !input enable_zone2
  enable_zone3: !input enable_zone3
  enable_zone4: !input enable_zone4
  parallel: !input parallel_watering
  manual_zone1_duration: !input manual_zone1_duration
  manual_zone2_duration: !input manual_zone2_duration
  manual_zone3_duration: !input manual_zone3_duration
  manual_zone4_duration: !input manual_zone4_duration
  
  # Schedule enables
  enable_fixed_time1: !input enable_fixed_time1
  enable_fixed_time2: !input enable_fixed_time2
  enable_fixed_time3: !input enable_fixed_time3
  enable_sunrise: !input enable_sunrise
  enable_sunset: !input enable_sunset
  enable_schedule_helper: !input enable_schedule_helper
  create_schedule: !input create_schedule_helper
  
  # Feature enables
  enable_manual_zone1: !input enable_manual_zone1
  enable_manual_zone2: !input enable_manual_zone2
  enable_manual_zone3: !input enable_manual_zone3
  enable_manual_zone4: !input enable_manual_zone4
  enable_soil_moisture: !input enable_soil_moisture
  enable_rain_amount: !input enable_rain_amount
  enable_rain_detection: !input enable_rain_detection
  enable_water_level: !input enable_water_level
  enable_pump: !input enable_pump
  enable_water_consumption: !input enable_water_consumption
  
  # Entity references (only when enabled)
  manual_zone1: !input manual_zone1_select
  manual_zone2: !input manual_zone2_select
  manual_zone3: !input manual_zone3_select
  manual_zone4: !input manual_zone4_select
  soil_sensor: !input soil_moisture_sensor
  soil_threshold: !input soil_moisture_threshold
  rain_sensor: !input rain_amount_sensor
  rain_threshold: !input rain_threshold
  rain_live_sensor: !input rain_live_sensor
  fill_sensor: !input water_level_sensor
  pump: !input pump
  pump_delay: !input pump_delay
  water_rate: !input water_consumption_per_minute
  existing_schedule_helper: !input existing_schedule_helper

condition:
  - condition: or
    conditions:
      # Fixed time schedules (only check if enabled)
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger.id == 'fixed_time1' and enable_fixed_time1 }}"
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger.id == 'fixed_time2' and enable_fixed_time2 }}"
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger.id == 'fixed_time3' and enable_fixed_time3 }}"
      
      # Sun-based schedules (only check if enabled)
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger.id == 'sunrise' and enable_sunrise }}"
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger.id == 'sunset' and enable_sunset }}"
      
      # Manual control checks (only when enabled AND entity exists)
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ trigger.id == 'manual_check' }}"
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ enable_manual_zone1 }}"
                  - condition: template
                    value_template: "{{ manual_zone1 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone1) == 'Start' }}"
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ enable_zone2 and enable_manual_zone2 }}"
                  - condition: template
                    value_template: "{{ manual_zone2 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone2) == 'Start' }}"
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ enable_zone3 and enable_manual_zone3 }}"
                  - condition: template
                    value_template: "{{ manual_zone3 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone3) == 'Start' }}"
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ enable_zone4 and enable_manual_zone4 }}"
                  - condition: template
                    value_template: "{{ manual_zone4 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone4) == 'Start' }}"
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ enable_schedule_helper and create_schedule }}"
                  - condition: template
                    value_template: "{{ states('schedule.irrigation_schedule') == 'on' }}"
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ enable_schedule_helper and not create_schedule }}"
                  - condition: template
                    value_template: "{{ existing_schedule_helper != '' }}"
                  - condition: template
                    value_template: "{{ states(existing_schedule_helper) == 'on' }}"

action:
  # Create schedule helper if requested
  - if:
      - condition: template
        value_template: "{{ enable_schedule_helper and create_schedule }}"
    then:
      - service: schedule.create
        data:
          object_id: irrigation_schedule
          name: "Irrigation Schedule"
          icon: "mdi:sprinkler"
        continue_on_error: true

  - choose:
      # Check water level (only if water level monitoring is enabled AND entity exists)
      - conditions:
          - condition: template
            value_template: "{{ enable_water_level }}"
          - condition: template
            value_template: "{{ water_source == 'rainwater' }}"
          - condition: template
            value_template: "{{ fill_sensor != '' }}"
          - condition: template
            value_template: "{{ (states(fill_sensor) | float(0)) < min_level }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: Irrigation blocked
              message: Fill level too low for pump!

      # Check soil moisture (only if soil monitoring is enabled AND entity exists)
      - conditions:
          - condition: template
            value_template: "{{ enable_soil_moisture }}"
          - condition: template
            value_template: "{{ soil_sensor != '' }}"
          - condition: template
            value_template: "{{ (states(soil_sensor) | float(0)) > soil_threshold }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: Irrigation not necessary
              message: Soil moisture above threshold.

      # Check rain amount (only if rain amount monitoring is enabled AND entity exists)
      - conditions:
          - condition: template
            value_template: "{{ enable_rain_amount }}"
          - condition: template
            value_template: "{{ rain_sensor != '' }}"
          - condition: template
            value_template: "{{ (states(rain_sensor) | float(0)) > rain_threshold }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: Irrigation skipped
              message: Rain amount above threshold.

      # Check live rain detection (only if rain detection is enabled AND entity exists)
      - conditions:
          - condition: template
            value_template: "{{ enable_rain_detection }}"
          - condition: template
            value_template: "{{ rain_live_sensor != '' }}"
          - condition: template
            value_template: "{{ is_state(rain_live_sensor, 'on') }}"
        sequence:
          - service: persistent_notification.create
            data:
              title: Irrigation stopped
              message: Rain detected by live sensor.

      - conditions: []
        sequence:
          # Reset manual controls (only if enabled AND entity exists AND in Start state)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'manual_check' }}"
                  - condition: template
                    value_template: "{{ enable_manual_zone1 }}"
                  - condition: template
                    value_template: "{{ manual_zone1 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone1) == 'Start' }}"
                sequence:
                  - service: input_select.select_option
                    target:
                      entity_id: "{{ manual_zone1 }}"
                    data:
                      option: "Stop"
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'manual_check' }}"
                  - condition: template
                    value_template: "{{ enable_zone2 and enable_manual_zone2 }}"
                  - condition: template
                    value_template: "{{ manual_zone2 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone2) == 'Start' }}"
                sequence:
                  - service: input_select.select_option
                    target:
                      entity_id: "{{ manual_zone2 }}"
                    data:
                      option: "Stop"
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'manual_check' }}"
                  - condition: template
                    value_template: "{{ enable_zone3 and enable_manual_zone3 }}"
                  - condition: template
                    value_template: "{{ manual_zone3 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone3) == 'Start' }}"
                sequence:
                  - service: input_select.select_option
                    target:
                      entity_id: "{{ manual_zone3 }}"
                    data:
                      option: "Stop"
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.id == 'manual_check' }}"
                  - condition: template
                    value_template: "{{ enable_zone4 and enable_manual_zone4 }}"
                  - condition: template
                    value_template: "{{ manual_zone4 != '' }}"
                  - condition: template
                    value_template: "{{ states(manual_zone4) == 'Start' }}"
                sequence:
                  - service: input_select.select_option
                    target:
                      entity_id: "{{ manual_zone4 }}"
                    data:
                      option: "Stop"

          # Start pump (only if pump control is enabled AND entity exists)
          - if:
              - condition: template
                value_template: "{{ enable_pump }}"
              - condition: template
                value_template: "{{ pump != '' }}"
            then:
              - service: switch.turn_on
                target:
                  entity_id: "{{ pump }}"
              - delay:
                  seconds: !input pump_delay

          # Execute watering based on mode
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ parallel }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: >
                        {{ zones_zone1 + 
                           (zones_zone2 if enable_zone2 else []) + 
                           (zones_zone3 if enable_zone3 else []) + 
                           (zones_zone4 if enable_zone4 else []) }}
                  - delay:
                      minutes: >
                        {{ [
                          manual_zone1_duration if manual_zone1_duration > 0 else 10,
                          (manual_zone2_duration if manual_zone2_duration > 0 else 5) if enable_zone2 else 0,
                          (manual_zone3_duration if manual_zone3_duration > 0 else 5) if enable_zone3 else 0,
                          (manual_zone4_duration if manual_zone4_duration > 0 else 7) if enable_zone4 else 0
                        ] | max }}
                  - service: homeassistant.turn_off
                    target:
                      entity_id: >
                        {{ zones_zone1 + 
                           (zones_zone2 if enable_zone2 else []) + 
                           (zones_zone3 if enable_zone3 else []) + 
                           (zones_zone4 if enable_zone4 else []) }}
              - conditions: []
                sequence:
                  # Zone 1 (always enabled)
                  - service: homeassistant.turn_on
                    target:
                      entity_id: "{{ zones_zone1 }}"
                  - delay:
                      minutes: "{{ manual_zone1_duration if manual_zone1_duration > 0 else 10 }}"
                  - service: homeassistant.turn_off
                    target:
                      entity_id: "{{ zones_zone1 }}"

                  # Zone 2 (only if enabled)
                  - if:
                      - condition: template
                        value_template: "{{ enable_zone2 and zones_zone2 | length > 0 }}"
                    then:
                      - service: homeassistant.turn_on
                        target:
                          entity_id: "{{ zones_zone2 }}"
                      - delay:
                          minutes: "{{ manual_zone2_duration if manual_zone2_duration > 0 else 5 }}"
                      - service: homeassistant.turn_off
                        target:
                          entity_id: "{{ zones_zone2 }}"

                  # Zone 3 (only if enabled)
                  - if:
                      - condition: template
                        value_template: "{{ enable_zone3 and zones_zone3 | length > 0 }}"
                    then:
                      - service: homeassistant.turn_on
                        target:
                          entity_id: "{{ zones_zone3 }}"
                      - delay:
                          minutes: "{{ manual_zone3_duration if manual_zone3_duration > 0 else 5 }}"
                      - service: homeassistant.turn_off
                        target:
                          entity_id: "{{ zones_zone3 }}"

                  # Zone 4 (only if enabled)
                  - if:
                      - condition: template
                        value_template: "{{ enable_zone4 and zones_zone4 | length > 0 }}"
                    then:
                      - service: homeassistant.turn_on
                        target:
                          entity_id: "{{ zones_zone4 }}"
                      - delay:
                          minutes: "{{ manual_zone4_duration if manual_zone4_duration > 0 else 7 }}"
                      - service: homeassistant.turn_off
                        target:
                          entity_id: "{{ zones_zone4 }}"

          # Stop pump (only if pump control is enabled AND entity exists)
          - if:
              - condition: template
                value_template: "{{ enable_pump }}"
              - condition: template
                value_template: "{{ pump != '' }}"
            then:
              - service: switch.turn_off
                target:
                  entity_id: "{{ pump }}"

          # Calculate and report water usage (only if enabled AND rate is set)
          - if:
              - condition: template
                value_template: "{{ enable_water_consumption }}"
              - condition: template
                value_template: "{{ water_rate > 0 }}"
            then:
              - service: persistent_notification.create
                data:
                  title: Water usage
                  message: >
                    Water used: {{
                      ( (manual_zone1_duration if manual_zone1_duration > 0 else 10) +
                        (enable_zone2 and (manual_zone2_duration if manual_zone2_duration > 0 else 5) or 0) +
                        (enable_zone3 and (manual_zone3_duration if manual_zone3_duration > 0 else 5) or 0) +
                        (enable_zone4 and (manual_zone4_duration if manual_zone4_duration > 0 else 7) or 0)
                      ) * water_rate
                    }} gallons.

mode: single
