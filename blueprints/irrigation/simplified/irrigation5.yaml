blueprint:
  name: Advanced Smart Irrigation â€” 4 Zones (Optional Helpers)
  description: >
    Full-featured 4-zone irrigation blueprint with optional helpers, detailed debug logging,
    pump control, weather & soil checks, manual triggers, utility meter integration (optional),
    and auto-reset.
    All helper entities (input_text, input_number, utility_meter, notify) are optional and
    selectable via inputs. Leave fields blank to disable tracking or features.
  domain: automation

  # ---------------------------
  # Inputs (all defined explicitly; grouped for UI clarity)
  # ---------------------------
  input:

    #################################################
    # Zone configuration (4 zones)
    #################################################
    # Zone 1
    enable_zone1:
      name: Enable Zone 1
      default: true
      selector:
        boolean: {}
    zone1_name:
      name: Zone 1 Friendly Name
      default: "Zone 1"
      selector:
        text: {}
    zone1_switch:
      name: Zone 1 Switch (optional)
      description: "Entity that controls Zone 1 (switch/valve). Leave blank if unused and disable the zone."
      default: ""
      selector:
        entity:
          domain: switch
    zone1_duration:
      name: Zone 1 Duration (minutes)
      default: 10
      selector:
        number:
          min: 0
          max: 240
          unit_of_measurement: minutes
    zone1_flow:
      name: Zone 1 flow rate (gal/min)
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 0.01

    zone1_last_run:
      name: Zone 1 - Last run (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone1_last_duration:
      name: Zone 1 - Last duration (optional input_number)
      default: ""
      selector:
        entity:
          domain: input_number
    zone1_last_status:
      name: Zone 1 - Last status (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone1_consumption_meter:
      name: Zone 1 - Consumption meter (optional utility_meter)
      default: ""
      selector:
        entity:
          domain: utility_meter

    # Zone 2
    enable_zone2:
      name: Enable Zone 2
      default: false
      selector:
        boolean: {}
    zone2_name:
      name: Zone 2 Friendly Name
      default: "Zone 2"
      selector:
        text: {}
    zone2_switch:
      name: Zone 2 Switch (optional)
      description: "Entity that controls Zone 2 (switch/valve). Leave blank if unused and disable the zone."
      default: ""
      selector:
        entity:
          domain: switch
    zone2_duration:
      name: Zone 2 Duration (minutes)
      default: 10
      selector:
        number:
          min: 0
          max: 240
          unit_of_measurement: minutes
    zone2_flow:
      name: Zone 2 flow rate (gal/min)
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 0.01

    zone2_last_run:
      name: Zone 2 - Last run (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone2_last_duration:
      name: Zone 2 - Last duration (optional input_number)
      default: ""
      selector:
        entity:
          domain: input_number
    zone2_last_status:
      name: Zone 2 - Last status (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone2_consumption_meter:
      name: Zone 2 - Consumption meter (optional utility_meter)
      default: ""
      selector:
        entity:
          domain: utility_meter

    # Zone 3
    enable_zone3:
      name: Enable Zone 3
      default: false
      selector:
        boolean: {}
    zone3_name:
      name: Zone 3 Friendly Name
      default: "Zone 3"
      selector:
        text: {}
    zone3_switch:
      name: Zone 3 Switch (optional)
      description: "Entity that controls Zone 3 (switch/valve). Leave blank if unused and disable the zone."
      default: ""
      selector:
        entity:
          domain: switch
    zone3_duration:
      name: Zone 3 Duration (minutes)
      default: 10
      selector:
        number:
          min: 0
          max: 240
          unit_of_measurement: minutes
    zone3_flow:
      name: Zone 3 flow rate (gal/min)
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 0.01

    zone3_last_run:
      name: Zone 3 - Last run (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone3_last_duration:
      name: Zone 3 - Last duration (optional input_number)
      default: ""
      selector:
        entity:
          domain: input_number
    zone3_last_status:
      name: Zone 3 - Last status (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone3_consumption_meter:
      name: Zone 3 - Consumption meter (optional utility_meter)
      default: ""
      selector:
        entity:
          domain: utility_meter

    # Zone 4
    enable_zone4:
      name: Enable Zone 4
      default: false
      selector:
        boolean: {}
    zone4_name:
      name: Zone 4 Friendly Name
      default: "Zone 4"
      selector:
        text: {}
    zone4_switch:
      name: Zone 4 Switch (optional)
      description: "Entity that controls Zone 4 (switch/valve). Leave blank if unused and disable the zone."
      default: ""
      selector:
        entity:
          domain: switch
    zone4_duration:
      name: Zone 4 Duration (minutes)
      default: 10
      selector:
        number:
          min: 0
          max: 240
          unit_of_measurement: minutes
    zone4_flow:
      name: Zone 4 flow rate (gal/min)
      default: 1.0
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 0.01

    zone4_last_run:
      name: Zone 4 - Last run (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone4_last_duration:
      name: Zone 4 - Last duration (optional input_number)
      default: ""
      selector:
        entity:
          domain: input_number
    zone4_last_status:
      name: Zone 4 - Last status (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text
    zone4_consumption_meter:
      name: Zone 4 - Consumption meter (optional utility_meter)
      default: ""
      selector:
        entity:
          domain: utility_meter

    #################################################
    # Manual controls per zone (optional)
    #################################################
    manual_zone1_enable:
      name: Enable manual trigger for Zone 1
      default: false
      selector:
        boolean: {}
    manual_zone1_entity:
      name: Manual Zone 1 trigger entity (optional; input_boolean or input_select)
      default: ""
      selector:
        entity: {}

    manual_zone2_enable:
      name: Enable manual trigger for Zone 2
      default: false
      selector:
        boolean: {}
    manual_zone2_entity:
      name: Manual Zone 2 trigger entity (optional; input_boolean or input_select)
      default: ""
      selector:
        entity: {}

    manual_zone3_enable:
      name: Enable manual trigger for Zone 3
      default: false
      selector:
        boolean: {}
    manual_zone3_entity:
      name: Manual Zone 3 trigger entity (optional; input_boolean or input_select)
      default: ""
      selector:
        entity: {}

    manual_zone4_enable:
      name: Enable manual trigger for Zone 4
      default: false
      selector:
        boolean: {}
    manual_zone4_entity:
      name: Manual Zone 4 trigger entity (optional; input_boolean or input_select)
      default: ""
      selector:
        entity: {}

    #################################################
    # Fixed time schedules & sun offsets
    #################################################
    fixed_time1_enable:
      name: Enable Fixed Time 1
      default: true
      selector:
        boolean: {}
    fixed_time1:
      name: Fixed Time 1 (HH:MM:SS)
      default: "06:00:00"
      selector:
        time: {}
    fixed_time2_enable:
      name: Enable Fixed Time 2
      default: false
      selector:
        boolean: {}
    fixed_time2:
      name: Fixed Time 2 (HH:MM:SS)
      default: "12:00:00"
      selector:
        time: {}
    fixed_time3_enable:
      name: Enable Fixed Time 3
      default: false
      selector:
        boolean: {}
    fixed_time3:
      name: Fixed Time 3 (HH:MM:SS)
      default: "18:00:00"
      selector:
        time: {}
    sunrise_enable:
      name: Enable Sunrise Schedule
      default: false
      selector:
        boolean: {}
    sunrise_offset:
      name: Sunrise offset (minutes)
      default: 0
      selector:
        number:
          min: -120
          max: 120
    sunset_enable:
      name: Enable Sunset Schedule
      default: false
      selector:
        boolean: {}
    sunset_offset:
      name: Sunset offset (minutes)
      default: 0
      selector:
        number:
          min: -120
          max: 120

    #################################################
    # Pump & water source
    #################################################
    enable_pump:
      name: Enable pump control
      default: false
      selector:
        boolean: {}
    pump_switch:
      name: Pump switch (optional)
      default: ""
      selector:
        entity:
          domain: switch
    pump_delay:
      name: Pump start delay (seconds)
      default: 5
      selector:
        number:
          min: 0
          max: 600
    water_source:
      name: Water source
      default: tap_water
      selector:
        select:
          options:
            - label: Tap water (no tank)
              value: tap_water
            - label: Rainwater / cistern
              value: rainwater
    enable_water_level:
      name: Enable water level check (tank systems)
      default: false
      selector:
        boolean: {}
    water_level_sensor:
      name: Water level sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    min_water_level:
      name: Minimum water level (units of your sensor)
      default: 100
      selector:
        number:
          min: 0
          max: 100000

    #################################################
    # Weather & soil sensors
    #################################################
    enable_rain_live:
      name: Enable live rain detection
      default: false
      selector:
        boolean: {}
    rain_live_sensor:
      name: Rain live binary sensor (optional)
      default: ""
      selector:
        entity:
          domain: binary_sensor
    enable_rain_amount:
      name: Enable rainfall amount check
      default: false
      selector:
        boolean: {}
    rain_amount_sensor:
      name: Rain amount sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    rain_amount_threshold:
      name: Rain amount threshold (sensor units)
      default: 0.4
      selector:
        number:
          min: 0
          max: 100
          step: 0.01
    enable_soil:
      name: Enable soil moisture check
      default: false
      selector:
        boolean: {}
    soil_sensor:
      name: Soil moisture sensor (optional)
      default: ""
      selector:
        entity:
          domain: sensor
    soil_threshold:
      name: Soil moisture threshold (%)
      default: 30
      selector:
        number:
          min: 0
          max: 100

    #################################################
    # Notifications & debug log (optional)
    #################################################
    notify_target:
      name: Notification target (optional)
      default: ""
      selector:
        entity:
          domain: notify
    notify_on_irrigation:
      name: Notify on start/abort/finish
      default: true
      selector:
        boolean: {}
    notify_on_summary:
      name: Notify summary at end
      default: true
      selector:
        boolean: {}
    notify_title:
      name: Notification title
      default: "Irrigation"
      selector:
        text: {}
    debug_log:
      name: Debug log (optional input_text)
      default: ""
      selector:
        entity:
          domain: input_text

    #################################################
    # Utility meters (optional references)
    #################################################
    irrigation_daily_meter:
      name: Daily irrigation meter (optional)
      default: ""
      selector:
        entity:
          domain: utility_meter
    irrigation_weekly_meter:
      name: Weekly irrigation meter (optional)
      default: ""
      selector:
        entity:
          domain: utility_meter
    irrigation_monthly_meter:
      name: Monthly irrigation meter (optional)
      default: ""
      selector:
        entity:
          domain: utility_meter

    #################################################
    # Auto-reset
    #################################################
    enable_auto_reset:
      name: Enable auto-reset (optional)
      default: false
      selector:
        boolean: {}
    auto_reset_delay:
      name: Auto-reset delay (seconds)
      default: 30
      selector:
        number:
          min: 0
          max: 86400

# ---------------------------
# Triggers
# ---------------------------
trigger:
  - platform: time
    at: !input fixed_time1
    id: fixed_time1
  - platform: time
    at: !input fixed_time2
    id: fixed_time2
  - platform: time
    at: !input fixed_time3
    id: fixed_time3
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset
    id: sunrise
  - platform: sun
    event: sunset
    offset: !input sunset_offset
    id: sunset
  - platform: time_pattern
    minutes: '/1'
    id: manual_poll

# ---------------------------
# Variables: assemble zones and settings
# ---------------------------
variables:
  # Expose all user inputs as variables so templates can safely reference them
  z1_name: !input zone1_name
  z2_name: !input zone2_name
  z3_name: !input zone3_name
  z4_name: !input zone4_name

  z1_enabled: !input enable_zone1
  z2_enabled: !input enable_zone2
  z3_enabled: !input enable_zone3
  z4_enabled: !input enable_zone4

  z1_switch: !input zone1_switch
  z2_switch: !input zone2_switch
  z3_switch: !input zone3_switch
  z4_switch: !input zone4_switch

  z1_duration: !input zone1_duration
  z2_duration: !input zone2_duration
  z3_duration: !input zone3_duration
  z4_duration: !input zone4_duration

  z1_flow: !input zone1_flow
  z2_flow: !input zone2_flow
  z3_flow: !input zone3_flow
  z4_flow: !input zone4_flow

  z1_last_run: !input zone1_last_run
  z1_last_duration: !input zone1_last_duration
  z1_last_status: !input zone1_last_status
  z1_meter: !input zone1_consumption_meter

  z2_last_run: !input zone2_last_run
  z2_last_duration: !input zone2_last_duration
  z2_last_status: !input zone2_last_status
  z2_meter: !input zone2_consumption_meter

  z3_last_run: !input zone3_last_run
  z3_last_duration: !input zone3_last_duration
  z3_last_status: !input zone3_last_status
  z3_meter: !input zone3_consumption_meter

  z4_last_run: !input zone4_last_run
  z4_last_duration: !input zone4_last_duration
  z4_last_status: !input zone4_last_status
  z4_meter: !input zone4_consumption_meter

  # Manual controls (exposed inputs)
  manual1_enabled: !input manual_zone1_enable
  manual1_entity: !input manual_zone1_entity
  manual2_enabled: !input manual_zone2_enable
  manual2_entity: !input manual_zone2_entity
  manual3_enabled: !input manual_zone3_enable
  manual3_entity: !input manual_zone3_entity
  manual4_enabled: !input manual_zone4_enable
  manual4_entity: !input manual_zone4_entity

  # Schedules (expose enable toggles)
  fixed1_enabled: !input fixed_time1_enable
  fixed2_enabled: !input fixed_time2_enable
  fixed3_enabled: !input fixed_time3_enable
  sunrise_enabled: !input sunrise_enable
  sunset_enabled: !input sunset_enable

  # Pump & water
  pump_enabled: !input enable_pump
  pump_switch: !input pump_switch
  pump_delay: !input pump_delay
  water_source: !input water_source
  water_level_enabled: !input enable_water_level
  water_level_sensor: !input water_level_sensor
  water_min_level: !input min_water_level

  # Weather
  rain_live_enabled: !input enable_rain_live
  rain_live_sensor: !input rain_live_sensor
  rain_amount_enabled: !input enable_rain_amount
  rain_amount_sensor: !input rain_amount_sensor
  rain_amount_threshold: !input rain_amount_threshold
  soil_enabled: !input enable_soil
  soil_sensor: !input soil_sensor
  soil_threshold: !input soil_threshold

  # Notifications & debug
  notify_target: !input notify_target
  notify_on_irrigation: !input notify_on_irrigation
  notify_on_summary: !input notify_on_summary
  notify_title: !input notify_title
  debug_log: !input debug_log

  # Meters
  meters_daily: !input irrigation_daily_meter
  meters_weekly: !input irrigation_weekly_meter
  meters_monthly: !input irrigation_monthly_meter

  # Auto-reset
  auto_reset_enabled: !input enable_auto_reset
  auto_reset_delay: !input auto_reset_delay

# ---------------------------
# Actions (main logic)
# ---------------------------
action:
  - variables:
      now_ts: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      trigger_id: "{{ trigger.id }}"

  # Decide whether this trigger should run (use exposed schedule booleans)
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {% if trigger.id == 'fixed_time1' %}
                {{ fixed1_enabled }}
              {% elif trigger.id == 'fixed_time2' %}
                {{ fixed2_enabled }}
              {% elif trigger.id == 'fixed_time3' %}
                {{ fixed3_enabled }}
              {% elif trigger.id == 'sunrise' %}
                {{ sunrise_enabled }}
              {% elif trigger.id == 'sunset' %}
                {{ sunset_enabled }}
              {% elif trigger.id == 'manual_poll' %}
                {{ (
                  (manual1_enabled and manual1_entity != '' and (states(manual1_entity) in ['on','Start'])) or
                  (manual2_enabled and manual2_entity != '' and (states(manual2_entity) in ['on','Start'])) or
                  (manual3_enabled and manual3_entity != '' and (states(manual3_entity) in ['on','Start'])) or
                  (manual4_enabled and manual4_entity != '' and (states(manual4_entity) in ['on','Start']))
                ) }}
              {% else %}
                false
              {% endif %}
        sequence: []

  # Identify if this is a manual run and which zone index (0-3)
  - variables:
      manual_idx: >
        {% set i = namespace(val=None) %}
        {% if trigger.id == 'manual_poll' %}
          {% if manual1_enabled and manual1_entity != '' and (states(manual1_entity) in ['on','Start']) %}
            {% set i.val = 0 %}
          {% elif manual2_enabled and manual2_entity != '' and (states(manual2_entity) in ['on','Start']) %}
            {% set i.val = 1 %}
          {% elif manual3_enabled and manual3_entity != '' and (states(manual3_entity) in ['on','Start']) %}
            {% set i.val = 2 %}
          {% elif manual4_enabled and manual4_entity != '' and (states(manual4_entity) in ['on','Start']) %}
            {% set i.val = 3 %}
          {% endif %}
        {% endif %}
        {{ i.val }}

  - variables:
      is_manual: "{{ manual_idx is not none }}"

  # Environmental pre-checks (skip if manual)
  - variables:
      skip_reason: ""

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ (not is_manual) and (water_source == 'rainwater') and water_level_enabled and (water_level_sensor != '') and (states(water_level_sensor)|float(0) < water_min_level) }}
        sequence:
          - variables:
              skip_reason: "Water level too low (sensor={{ water_level_sensor }}, value={{ states(water_level_sensor) }}, min={{ water_min_level }})"
      - conditions:
          - condition: template
            value_template: >
              {{ (not is_manual) and soil_enabled and (soil_sensor != '') and (states(soil_sensor)|float(0) > soil_threshold) }}
        sequence:
          - variables:
              skip_reason: "Soil moisture above threshold (sensor={{ soil_sensor }}, value={{ states(soil_sensor) }}, threshold={{ soil_threshold }})"
      - conditions:
          - condition: template
            value_template: >
              {{ (not is_manual) and rain_amount_enabled and (rain_amount_sensor != '') and (states(rain_amount_sensor)|float(0) > rain_amount_threshold) }}
        sequence:
          - variables:
              skip_reason: "Recent rainfall above threshold (sensor={{ rain_amount_sensor }}, value={{ states(rain_amount_sensor) }}, threshold={{ rain_amount_threshold }})"
      - conditions:
          - condition: template
            value_template: >
              {{ (not is_manual) and rain_live_enabled and (rain_live_sensor != '') and is_state(rain_live_sensor,'on') }}
        sequence:
          - variables:
              skip_reason: "Live rain detected (sensor={{ rain_live_sensor }})"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ skip_reason != '' }}"
        sequence:
          # Detailed debug log if configured (selectable debug_log input)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ debug_log != '' }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: !input debug_log
                    data:
                      value: "SKIPPED: {{ skip_reason }} at {{ now_ts }} (trigger={{ trigger.id }})"
              - conditions: []
                sequence:
                  # optional fallback: write to a built-in default if you create one; otherwise skip
                  - service: input_text.set_value
                    data:
                      entity_id: "input_text.irrigation_debug_log"
                      value: "SKIPPED: {{ skip_reason }} at {{ now_ts }} (trigger={{ trigger.id }})"
          # Notifications about skip
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notify_on_irrigation and notify_target != '' }}"
                sequence:
                  - service: notify.notify
                    data:
                      target: "{{ notify_target }}"
                      title: "{{ notify_title }}"
                      message: "Irrigation skipped: {{ skip_reason }}"
              - conditions:
                  - condition: template
                    value_template: "{{ notify_on_irrigation and notify_target == '' }}"
                sequence:
                  - service: notify.notify
                    data:
                      title: "{{ notify_title }}"
                      message: "Irrigation skipped: {{ skip_reason }}"
          - stop: "Pre-check blocked irrigation"

  # Start pump if configured and pump switch provided (use data.entity_id when templating)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ pump_enabled and pump_switch != '' }}"
        sequence:
          - service: switch.turn_on
            data:
              entity_id: "{{ pump_switch }}"
          - delay:
              seconds: "{{ pump_delay }}"

  # Build list of indices to run (manual single index or all enabled zones)
  - variables:
      run_indices: >
        {% set idxs = [] %}
        {% if is_manual %}
          {{ idxs.append(manual_idx) or idxs }}
        {% else %}
          {% if z1_enabled and z1_switch != '' %} {{ idxs.append(0) or idxs }} {% endif %}
          {% if z2_enabled and z2_switch != '' %} {{ idxs.append(1) or idxs }} {% endif %}
          {% if z3_enabled and z3_switch != '' %} {{ idxs.append(2) or idxs }} {% endif %}
          {% if z4_enabled and z4_switch != '' %} {{ idxs.append(3) or idxs }} {% endif %}
        {% endif %}
        {{ idxs }}

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (run_indices | length) == 0 }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ debug_log != '' }}"
                sequence:
                  - service: input_text.set_value
                    target:
                      entity_id: !input debug_log
                    data:
                      value: "NO ZONES: Nothing to run at {{ now_ts }} (trigger={{ trigger.id }})"
              - conditions: []
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: "input_text.irrigation_debug_log"
                      value: "NO ZONES: Nothing to run at {{ now_ts }} (trigger={{ trigger.id }})"
          - stop: "Nothing to run"

  # Execute watering sequentially (repeat over run_indices)
  - repeat:
      for_each: "{{ run_indices }}"
      sequence:
        - variables:
            idx: "{{ repeat.item }}"
            # map idx to zone variables for easier use
            z_name: >
              {% if repeat.item == 0 %}{{ z1_name }}{% elif repeat.item == 1 %}{{ z2_name }}{% elif repeat.item == 2 %}{{ z3_name }}{% else %}{{ z4_name }}{% endif %}
            z_switch: >
              {% if repeat.item == 0 %}{{ z1_switch }}{% elif repeat.item == 1 %}{{ z2_switch }}{% elif repeat.item == 2 %}{{ z3_switch }}{% else %}{{ z4_switch }}{% endif %}
            z_duration: >
              {% if repeat.item == 0 %}{{ z1_duration }}{% elif repeat.item == 1 %}{{ z2_duration }}{% elif repeat.item == 2 %}{{ z3_duration }}{% else %}{{ z4_duration }}{% endif %}
            z_flow: >
              {% if repeat.item == 0 %}{{ z1_flow }}{% elif repeat.item == 1 %}{{ z2_flow }}{% elif repeat.item == 2 %}{{ z3_flow }}{% else %}{{ z4_flow }}{% endif %}
            z_last_run: >
              {% if repeat.item == 0 %}{{ z1_last_run }}{% elif repeat.item == 1 %}{{ z2_last_run }}{% elif repeat.item == 2 %}{{ z3_last_run }}{% else %}{{ z4_last_run }}{% endif %}
            z_last_duration: >
              {% if repeat.item == 0 %}{{ z1_last_duration }}{% elif repeat.item == 1 %}{{ z2_last_duration }}{% elif repeat.item == 2 %}{{ z3_last_duration }}{% else %}{{ z4_last_duration }}{% endif %}
            z_last_status: >
              {% if repeat.item == 0 %}{{ z1_last_status }}{% elif repeat.item == 1 %}{{ z2_last_status }}{% elif repeat.item == 2 %}{{ z3_last_status }}{% else %}{{ z4_last_status }}{% endif %}
            z_meter: >
              {% if repeat.item == 0 %}{{ z1_meter }}{% elif repeat.item == 1 %}{{ z2_meter }}{% elif repeat.item == 2 %}{{ z3_meter }}{% else %}{{ z4_meter }}{% endif %}
            run_minutes: "{{ (z_duration|int) }}"
            run_flow: "{{ (z_flow|float(0)) }}"

        # Start debug log entry for zone start (write to configured debug_log or fallback debug entity)
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ debug_log != '' }}"
              sequence:
                - service: input_text.set_value
                  target:
                    entity_id: !input debug_log
                  data:
                    value: "START: Zone {{ idx+1 }} ({{ z_name }}) - duration={{ run_minutes }} min, flow={{ run_flow }} gal/min, manual={{ is_manual }}, trigger={{ trigger.id }} at {{ now_ts }}"
            - conditions: []
              sequence:
                - service: input_text.set_value
                  data:
                    entity_id: "input_text.irrigation_debug_log"
                    value: "START: Zone {{ idx+1 }} ({{ z_name }}) - duration={{ run_minutes }} min, flow={{ run_flow }} gal/min, manual={{ is_manual }}, trigger={{ trigger.id }} at {{ now_ts }}"

        # Turn on zone switch (guarded)
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ z_switch != '' }}"
              sequence:
                - service: switch.turn_on
                  data:
                    entity_id: "{{ z_switch }}"
            - conditions: []
              sequence:
                - service: input_text.set_value
                  data:
                    entity_id: "{{ debug_log if debug_log != '' else 'input_text.irrigation_debug_log' }}"
                    value: "ERROR: Zone {{ idx+1 }} has no switch configured; skipping."
                - stop: "Zone missing switch"

        # Delay for runtime (minutes)
        - delay:
            minutes: "{{ run_minutes }}"

        # Early-abort checks (only for scheduled runs; manual runs bypass weather/soil/rain checks but still respect pump level)
        - choose:
            - conditions:
                - condition: template
                  value_template: >
                    {{ (not is_manual) and (
                        (water_source == 'rainwater' and water_level_enabled and water_level_sensor != '' and (states(water_level_sensor)|float(0) < water_min_level)) or
                        (soil_enabled and soil_sensor != '' and (states(soil_sensor)|float(0) > soil_threshold)) or
                        (rain_amount_enabled and rain_amount_sensor != '' and (states(rain_amount_sensor)|float(0) > rain_amount_threshold)) or
                        (rain_live_enabled and rain_live_sensor != '' and is_state(rain_live_sensor,'on'))
                      ) }}
              sequence:
                # detailed abort log
                - service: input_text.set_value
                  data:
                    entity_id: "{{ debug_log if debug_log != '' else 'input_text.irrigation_debug_log' }}"
                    value: >
                      ABORT: Zone {{ idx+1 }} aborted due to environmental check at {{ now_ts }}.
                      (pump_level={{ states(water_level_sensor) if water_level_sensor!='' else 'n/a' }},
                      soil={{ states(soil_sensor) if soil_sensor!='' else 'n/a' }},
                      rain_amount={{ states(rain_amount_sensor) if rain_amount_sensor!='' else 'n/a' }},
                      rain_live={{ rain_live_sensor }})
                - service: switch.turn_off
                  data:
                    entity_id: "{{ z_switch }}"
                - choose:
                    - conditions:
                        - condition: template
                          value_template: "{{ z_last_status != '' }}"
                      sequence:
                        - service: input_text.set_value
                          target:
                            entity_id: "{{ z_last_status }}"
                          data:
                            value: "Aborted at {{ now_ts }} (reason logged)"
                - stop: "Early abort"

        # Turn off zone switch (normal completion)
        - service: switch.turn_off
          data:
            entity_id: "{{ z_switch }}"

        # Record helpers (only if configured)
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ z_last_run != '' }}"
              sequence:
                - service: input_text.set_value
                  target:
                    entity_id: "{{ z_last_run }}"
                  data:
                    value: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ z_last_duration != '' }}"
              sequence:
                - service: input_number.set_value
                  target:
                    entity_id: "{{ z_last_duration }}"
                  data:
                    value: "{{ run_minutes }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ z_last_status != '' }}"
              sequence:
                - service: input_text.set_value
                  target:
                    entity_id: "{{ z_last_status }}"
                  data:
                    value: "Completed at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ z_meter != '' }}"
              sequence:
                - service: utility_meter.increment
                  data:
                    entity_id: "{{ z_meter }}"
                    value: "{{ (run_minutes | float(0)) * (run_flow | float(0)) }}"

  # Stop pump if started
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ pump_enabled and pump_switch != '' }}"
        sequence:
          - service: switch.turn_off
            data:
              entity_id: "{{ pump_switch }}"

  # Send summary notification if requested
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ notify_on_summary and notify_target != '' }}"
        sequence:
          - service: notify.notify
            data:
              target: "{{ notify_target }}"
              title: "{{ notify_title }}"
              message: >
                Irrigation completed at {{ now_ts }}.
                (Triggered by {{ trigger.id }})
                Manual run: {{ is_manual }}

  # Increment global meters (optional)
  - variables:
      # cycle_total computed conservatively from recorded last durations * flow of each zone if you created the helpers
      cycle_total: >
        {{ (
            (states(z1_last_duration)|float(0) * z1_flow|float(0)) +
            (states(z2_last_duration)|float(0) * z2_flow|float(0)) +
            (states(z3_last_duration)|float(0) * z3_flow|float(0)) +
            (states(z4_last_duration)|float(0) * z4_flow|float(0))
           ) | round(2)
        }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ meters_daily != '' }}"
        sequence:
          - service: utility_meter.increment
            data:
              entity_id: "{{ meters_daily }}"
              value: "{{ cycle_total }}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ meters_weekly != '' }}"
        sequence:
          - service: utility_meter.increment
            data:
              entity_id: "{{ meters_weekly }}"
              value: "{{ cycle_total }}"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ meters_monthly != '' }}"
        sequence:
          - service: utility_meter.increment
            data:
              entity_id: "{{ meters_monthly }}"
              value: "{{ cycle_total }}"

  # Auto-reset schedule helper (optional) â€” only run if you pass a schedule helper entity into meters_daily (or set a separate schedule input)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ auto_reset_enabled and auto_reset_delay > 0 and meters_daily != '' }}"
        sequence:
          - delay:
              seconds: "{{ auto_reset_delay }}"
          - service: homeassistant.turn_off
            data:
              entity_id: "{{ meters_daily }}"  # user may replace with schedule helper entity if desired

mode: single
