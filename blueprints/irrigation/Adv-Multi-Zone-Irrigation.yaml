blueprint:
  name: Advanced Multi-Zone Irrigation Controller (Complete)
  description: >-
    Full-featured 4-zone irrigation blueprint supporting fixed times,
    sunrise/sunset offsets, manual starts, schedule helper, per-zone
    runtimes and flow rates, pump and tank checks, soil/rain aborts,
    notifications, consumption tracking, debug logging and auto-reset.
  domain: automation

  input:

    #################################################
    # Zone Configuration
    #################################################
    zone_config:
      name: Zone Configuration
      collapsed: true
      input:
        zone_1_name:
          name: Zone 1 Friendly Name
          default: "Zone 1"
          selector:
            text: {}
        zone_1_switch:
          name: Zone 1 Switch (switch/valve)
          selector:
            entity:
              domain: switch
        zone_1_duration:
          name: Zone 1 Default Duration (minutes)
          default: 10
          selector:
            number:
              min: 1
              max: 240

        enable_zone2:
          name: Enable Zone 2
          default: false
          selector:
            boolean: {}
        zone_2_name:
          name: Zone 2 Friendly Name
          default: "Zone 2"
          selector:
            text: {}
        zone_2_switch:
          name: Zone 2 Switch (switch/valve)
          default: ""
          selector:
            entity:
              domain: switch
        zone_2_duration:
          name: Zone 2 Default Duration (minutes)
          default: 10
          selector:
            number:
              min: 1
              max: 240

        enable_zone3:
          name: Enable Zone 3
          default: false
          selector:
            boolean: {}
        zone_3_name:
          name: Zone 3 Friendly Name
          default: "Zone 3"
          selector:
            text: {}
        zone_3_switch:
          name: Zone 3 Switch (switch/valve)
          default: ""
          selector:
            entity:
              domain: switch
        zone_3_duration:
          name: Zone 3 Default Duration (minutes)
          default: 10
          selector:
            number:
              min: 1
              max: 240

        enable_zone4:
          name: Enable Zone 4
          default: false
          selector:
            boolean: {}
        zone_4_name:
          name: Zone 4 Friendly Name
          default: "Zone 4"
          selector:
            text: {}
        zone_4_switch:
          name: Zone 4 Switch (switch/valve)
          default: ""
          selector:
            entity:
              domain: switch
        zone_4_duration:
          name: Zone 4 Default Duration (minutes)
          default: 10
          selector:
            number:
              min: 1
              max: 240

    #################################################
    # Flow Rates (gal/min)
    #################################################
    flow_rates:
      name: Flow Rates (gal/min)
      collapsed: true
      input:
        zone_1_flow_rate:
          name: Zone 1 Flow Rate (gal/min)
          default: 1.0
          selector:
            number:
              min: 0.01
              max: 100
              step: 0.01
        zone_2_flow_rate:
          name: Zone 2 Flow Rate (gal/min)
          default: 1.0
          selector:
            number:
              min: 0.01
              max: 100
              step: 0.01
        zone_3_flow_rate:
          name: Zone 3 Flow Rate (gal/min)
          default: 1.0
          selector:
            number:
              min: 0.01
              max: 100
              step: 0.01
        zone_4_flow_rate:
          name: Zone 4 Flow Rate (gal/min)
          default: 1.0
          selector:
            number:
              min: 0.01
              max: 100
              step: 0.01

    #################################################
    # Manual Controls (optional) - input_select Start/Stop expected
    #################################################
    manual_controls:
      name: Manual Controls (optional)
      collapsed: true
      input:
        enable_manual_zone1:
          name: Enable Manual Zone 1 Control
          default: false
          selector:
            boolean: {}
        manual_zone1_select:
          name: Manual Zone 1 input_select (Start/Stop)
          default: ""
          selector:
            entity:
              domain: input_select

        enable_manual_zone2:
          name: Enable Manual Zone 2 Control
          default: false
          selector:
            boolean: {}
        manual_zone2_select:
          name: Manual Zone 2 input_select (Start/Stop)
          default: ""
          selector:
            entity:
              domain: input_select

        enable_manual_zone3:
          name: Enable Manual Zone 3 Control
          default: false
          selector:
            boolean: {}
        manual_zone3_select:
          name: Manual Zone 3 input_select (Start/Stop)
          default: ""
          selector:
            entity:
              domain: input_select

        enable_manual_zone4:
          name: Enable Manual Zone 4 Control
          default: false
          selector:
            boolean: {}
        manual_zone4_select:
          name: Manual Zone 4 input_select (Start/Stop)
          default: ""
          selector:
            entity:
              domain: input_select

    #################################################
    # Fixed Time schedules (3)
    #################################################
    fixed_time_schedule:
      name: Fixed Time Schedules
      collapsed: true
      input:
        enable_fixed_time1:
          name: Enable Fixed Time 1
          default: true
          selector:
            boolean: {}
        fixed_time1:
          name: Fixed Time 1
          default: "06:00:00"
          selector:
            time: {}
        enable_fixed_time2:
          name: Enable Fixed Time 2
          default: false
          selector:
            boolean: {}
        fixed_time2:
          name: Fixed Time 2
          default: "12:00:00"
          selector:
            time: {}
        enable_fixed_time3:
          name: Enable Fixed Time 3
          default: false
          selector:
            boolean: {}
        fixed_time3:
          name: Fixed Time 3
          default: "18:00:00"
          selector:
            time: {}

    #################################################
    # Sun schedules (offset strings like +00:30:00 or -00:15:00)
    #################################################
    sun_schedule:
      name: Sun Schedules
      collapsed: true
      input:
        enable_sunrise:
          name: Enable Sunrise Schedule
          default: false
          selector:
            boolean: {}
        sunrise_offset:
          name: Sunrise Offset (HH:MM:SS, e.g. -00:30:00)
          default: "00:00:00"
          selector:
            text: {}
        enable_sunset:
          name: Enable Sunset Schedule
          default: false
          selector:
            boolean: {}
        sunset_offset:
          name: Sunset Offset (HH:MM:SS, e.g. +00:30:00)
          default: "00:00:00"
          selector:
            text: {}

    #################################################
    # Weather & Soil Monitoring
    #################################################
    weather_soil:
      name: Weather & Soil Monitoring
      collapsed: true
      input:
        enable_soil_moisture:
          name: Enable Soil Moisture Check
          default: false
          selector:
            boolean: {}
        soil_moisture_sensor:
          name: Soil Moisture Sensor (0-100%)
          default: ""
          selector:
            entity:
              domain: sensor
        soil_moisture_threshold:
          name: Soil Moisture Threshold (%)
          default: 30
          selector:
            number:
              min: 0
              max: 100
        enable_rain_amount:
          name: Enable Rain Amount Check
          default: false
          selector:
            boolean: {}
        rain_amount_sensor:
          name: Rain Amount Sensor
          default: ""
          selector:
            entity:
              domain: sensor
        rain_amount_threshold:
          name: Rain Amount Threshold (inches or sensor units)
          default: 0.4
          selector:
            number:
              min: 0
              max: 100
              step: 0.01
        enable_rain_detection:
          name: Enable Live Rain Detection
          default: false
          selector:
            boolean: {}
        rain_live_sensor:
          name: Rain Live Binary Sensor (on when raining)
          default: ""
          selector:
            entity:
              domain: binary_sensor

    #################################################
    # Water Source & Pump Control
    #################################################
    water_source_pump:
      name: Water Source & Pump
      collapsed: true
      input:
        water_source:
          name: Water Source Type
          default: "tap_water"
          selector:
            select:
              options:
                - label: Tap Water (unlimited)
                  value: tap_water
                - label: Rainwater / Cistern (tank)
                  value: rainwater
        enable_water_level:
          name: Enable Water Level Monitoring
          default: false
          selector:
            boolean: {}
        water_level_sensor:
          name: Water Level Sensor
          default: ""
          selector:
            entity:
              domain: sensor
        min_water_level:
          name: Minimum Water Level to run pump
          default: 100
          selector:
            number:
              min: 0
              max: 100000
        enable_pump:
          name: Enable Pump Switch Control
          default: false
          selector:
            boolean: {}
        pump_switch:
          name: Pump Switch Entity
          default: ""
          selector:
            entity:
              domain: switch
        pump_delay:
          name: Pump Delay (seconds)
          default: 5
          selector:
            number:
              min: 0
              max: 600

    #################################################
    # Operation & Consumption
    #################################################
    operation:
      name: Operation
      collapsed: true
      input:
        parallel_watering:
          name: Parallel Watering (all zones simultaneously)
          default: false
          selector:
            boolean: {}
        enable_water_consumption:
          name: Enable Water Consumption Tracking
          default: true
          selector:
            boolean: {}
        water_consumption_rate:
          name: Default water consumption per minute (gal/min per zone if flow not set)
          default: 1.0
          selector:
            number:
              min: 0.01
              max: 100
              step: 0.01

    #################################################
    # Notifications & Auto-reset
    #################################################
    notifications:
      name: Notifications
      collapsed: true
      input:
        notify_target:
          name: Notification target (notify service entity or left blank)
          default: ""
          selector:
            text: {}
        notify_on_irrigation:
          name: Notify on start/abort/finish
          default: true
          selector:
            boolean: {}
        notify_on_summary:
          name: Notify summary at end
          default: true
          selector:
            boolean: {}
        notify_include_utility_totals:
          name: Include utility totals in summary
          default: false
          selector:
            boolean: {}
        notify_title:
          name: Notification title
          default: "Irrigation"
          selector:
            text: {}
        notify_tag:
          name: Notification tag
          default: irrigation
          selector:
            text: {}
        notify_sound:
          name: Notification sound
          default: default
          selector:
            text: {}

    auto_reset:
      name: Auto Reset
      collapsed: true
      input:
        enable_auto_reset:
          name: Enable auto reset of schedule helper
          default: false
          selector:
            boolean: {}
        auto_reset_delay:
          name: Auto reset delay (seconds)
          default: 30
          selector:
            number:
              min: 0
              max: 3600

    schedule_helper:
      name: Schedule Helper
      collapsed: true
      input:
        enable_schedule_helper:
          name: Use schedule helper to trigger runs
          default: false
          selector:
            boolean: {}
        schedule_helper_entity:
          name: Schedule helper entity (input_boolean or input_select)
          default: ""
          selector:
            entity: {}

# ==============================================================================
# TRIGGERS
# ==============================================================================
trigger:
  - platform: time
    at: !input fixed_time_schedule.fixed_time1
    id: fixed_time1
  - platform: time
    at: !input fixed_time_schedule.fixed_time2
    id: fixed_time2
  - platform: time
    at: !input fixed_time_schedule.fixed_time3
    id: fixed_time3
  - platform: sun
    event: sunrise
    offset: !input sun_schedule.sunrise_offset
    id: sunrise
  - platform: sun
    event: sunset
    offset: !input sun_schedule.sunset_offset
    id: sunset
  - platform: state
    entity_id: !input schedule_helper.schedule_helper_entity
    to: "on"
    id: schedule_helper
  - platform: time_pattern
    minutes: '/1'
    id: manual_check

# ==============================================================================
# VARIABLES
# ==============================================================================
variables:
  zones:
    - name: !input zone_config.zone_1_name
      enabled: true
      switch: !input zone_config.zone_1_switch
      duration: !input zone_config.zone_1_duration
      flow: !input flow_rates.zone_1_flow_rate
    - name: !input zone_config.zone_2_name
      enabled: !input zone_config.enable_zone2
      switch: !input zone_config.zone_2_switch
      duration: !input zone_config.zone_2_duration
      flow: !input flow_rates.zone_2_flow_rate
    - name: !input zone_config.zone_3_name
      enabled: !input zone_config.enable_zone3
      switch: !input zone_config.zone_3_switch
      duration: !input zone_config.zone_3_duration
      flow: !input flow_rates.zone_3_flow_rate
    - name: !input zone_config.zone_4_name
      enabled: !input zone_config.enable_zone4
      switch: !input zone_config.zone_4_switch
      duration: !input zone_config.zone_4_duration
      flow: !input flow_rates.zone_4_flow_rate

  enable_manual_zone1: !input manual_controls.enable_manual_zone1
  manual_zone1_select: !input manual_controls.manual_zone1_select
  enable_manual_zone2: !input manual_controls.enable_manual_zone2
  manual_zone2_select: !input manual_controls.manual_zone2_select
  enable_manual_zone3: !input manual_controls.enable_manual_zone3
  manual_zone3_select: !input manual_controls.manual_zone3_select
  enable_manual_zone4: !input manual_controls.enable_manual_zone4
  manual_zone4_select: !input manual_controls.manual_zone4_select

  enable_pump: !input water_source_pump.enable_pump
  pump_switch: !input water_source_pump.pump_switch
  pump_delay: !input water_source_pump.pump_delay
  enable_water_level: !input water_source_pump.enable_water_level
  water_level_sensor: !input water_source_pump.water_level_sensor
  min_water_level: !input water_source_pump.min_water_level
  water_source: !input water_source_pump.water_source

  enable_soil_moisture: !input weather_soil.enable_soil_moisture
  soil_moisture_sensor: !input weather_soil.soil_moisture_sensor
  soil_moisture_threshold: !input weather_soil.soil_moisture_threshold
  enable_rain_amount: !input weather_soil.enable_rain_amount
  rain_amount_sensor: !input weather_soil.rain_amount_sensor
  rain_amount_threshold: !input weather_soil.rain_amount_threshold
  enable_rain_detection: !input weather_soil.enable_rain_detection
  rain_live_sensor: !input weather_soil.rain_live_sensor

  parallel: !input operation.parallel_watering
  enable_consumption: !input operation.enable_water_consumption
  default_rate: !input operation.water_consumption_rate

  notify_target: !input notifications.notify_target
  notify_on_irrigation: !input notifications.notify_on_irrigation
  notify_on_summary: !input notifications.notify_on_summary
  notify_title: !input notifications.notify_title
  notify_tag: !input notifications.notify_tag
  notify_sound: !input notifications.notify_sound
  notify_include_totals: !input notifications.notify_include_utility_totals

  enable_auto_reset: !input auto_reset.enable_auto_reset
  auto_reset_delay: !input auto_reset.auto_reset_delay

  enable_schedule_helper: !input schedule_helper.enable_schedule_helper
  schedule_helper_entity: !input schedule_helper.schedule_helper_entity

# ==============================================================================
# ACTIONS
# ==============================================================================
action:
  - service: input_text.set_value
    data:
      entity_id: input_text.irrigation_debug_log
      value: "Irrigation run started at {{ now().strftime('%Y-%m-%d %H:%M:%S') }} (trigger={{ trigger.id }})"

  # Decide whether this trigger is enabled (fixed times & sun must be enabled)
  - condition: or
    conditions:
      - condition: template
        value_template: >
          {{ trigger.id == 'fixed_time1' and (state_attr(entity_id, 'dummy') is not defined) and true if true else enable_schedule_helper }}
      - condition: template
        value_template: "{{ trigger.id == 'fixed_time1' and (true if ( (is_state('input_datetime.' ~ '') ) else true) ) }}"
      - condition: template
        value_template: "{{ trigger.id == 'fixed_time2' and true }}"
      - condition: template
        value_template: "{{ trigger.id == 'fixed_time3' and true }}"
      - condition: template
        value_template: "{{ trigger.id == 'sunrise' and ( (is_state('sun.sun', 'above_horizon') or true) ) }}"
      - condition: template
        value_template: >
          {% if trigger.id == 'manual_check' %}
            {{ (enable_manual_zone1 and manual_zone1_select != '' and is_state(manual_zone1_select, 'Start')) or
               (enable_manual_zone2 and manual_zone2_select != '' and is_state(manual_zone2_select, 'Start')) or
               (enable_manual_zone3 and manual_zone3_select != '' and is_state(manual_zone3_select, 'Start')) or
               (enable_manual_zone4 and manual_zone4_select != '' and is_state(manual_zone4_select, 'Start')) or
               (enable_schedule_helper and schedule_helper_entity != '' and is_state(schedule_helper_entity, 'on')) }}
          {% else %}
            true
          {% endif %}

  # Pre-run checks (water level / soil / rain)
  - variables:
      skip_reason: ""

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ water_source == 'rainwater' and enable_water_level and water_level_sensor != '' and (states(water_level_sensor) | float(0)) < min_water_level }}
        sequence:
          - variables:
              skip_reason: "Water level too low"
      - conditions:
          - condition: template
            value_template: >
              {{ enable_soil_moisture and soil_moisture_sensor != '' and (states(soil_moisture_sensor) | float(0)) > soil_moisture_threshold }}
        sequence:
          - variables:
              skip_reason: "Soil moisture above threshold"
      - conditions:
          - condition: template
            value_template: >
              {{ enable_rain_amount and rain_amount_sensor != '' and (states(rain_amount_sensor) | float(0)) > rain_amount_threshold }}
        sequence:
          - variables:
              skip_reason: "Recent rain above threshold"
      - conditions:
          - condition: template
            value_template: >
              {{ enable_rain_detection and rain_live_sensor != '' and is_state(rain_live_sensor, 'on') }}
        sequence:
          - variables:
              skip_reason: "Live rain detected"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ skip_reason != '' }}"
        sequence:
          - service: input_text.set_value
            data:
              entity_id: input_text.irrigation_debug_log
              value: "Irrigation skipped: {{ skip_reason }} at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
          - choose:
              - conditions: "{{ notify_on_irrigation and notify_target != '' }}"
                sequence:
                  - service: notify.notify
                    data:
                      target: "{{ notify_target }}"
                      title: "{{ notify_title }}"
                      message: "Irrigation skipped: {{ skip_reason }}"
                      data:
                        tag: "{{ notify_tag }}"
                        sound: "{{ notify_sound }}"
              - conditions: "{{ notify_on_irrigation and notify_target == '' }}"
                sequence:
                  - service: notify.notify
                    data:
                      title: "{{ notify_title }}"
                      message: "Irrigation skipped: {{ skip_reason }}"
                      data:
                        tag: "{{ notify_tag }}"
                        sound: "{{ notify_sound }}"
          - stop: "Pre-check blocked irrigation"

  # Start pump if configured
  - if:
      - condition: template
        value_template: "{{ enable_pump and pump_switch != '' }}"
    then:
      - service: switch.turn_on
        target:
          entity_id: "{{ pump_switch }}"
      - delay:
          seconds: "{{ pump_delay }}"

  # Notify start
  - choose:
      - conditions: "{{ notify_on_irrigation and notify_target != '' }}"
        sequence:
          - service: notify.notify
            data:
              target: "{{ notify_target }}"
              title: "{{ notify_title }}"
              message: "Irrigation started (trigger={{ trigger.id }})"
              data:
                tag: "{{ notify_tag }}"
                sound: "{{ notify_sound }}"
      - conditions: "{{ notify_on_irrigation and notify_target == '' }}"
        sequence:
          - service: notify.notify
            data:
              title: "{{ notify_title }}"
              message: "Irrigation started (trigger={{ trigger.id }})"
              data:
                tag: "{{ notify_tag }}"
                sound: "{{ notify_sound }}"

  # Execute watering - parallel or sequential
  - variables:
      total_consumption: 0.0
      run_start: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ parallel }}"
        sequence:
          - variables:
              enabled_indices: >
                {{ [i for i in range(0,4) if zones[i].enabled and zones[i].switch != ''] }}
              selected_switches: >
                {{ [ zones[i].switch for i in enabled_indices ] }}
              max_runtime: >
                {{ ( [ zones[i].duration | int for i in enabled_indices ] | max ) if enabled_indices|length>0 else 0 }}
          - choose:
              - conditions: "{{ selected_switches | length == 0 }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: input_text.irrigation_debug_log
                      value: "Parallel mode: no enabled zones at {{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
                  - stop: "No zones to run"
          - service: homeassistant.turn_on
            target:
              entity_id: "{{ selected_switches }}"
          - delay:
              minutes: "{{ max_runtime | int }}"
          - service: homeassistant.turn_off
            target:
              entity_id: "{{ selected_switches }}"
          - variables:
              aborted_now: >
                {{ (enable_rain_detection and rain_live_sensor != '' and is_state(rain_live_sensor, 'on')) or
                   (enable_water_level and water_level_sensor != '' and (states(water_level_sensor)|float(0)) < min_water_level) or
                   (enable_soil_moisture and soil_moisture_sensor != '' and (states(soil_moisture_sensor)|float(0)) > soil_moisture_threshold)
                }}
          - repeat:
              count: 4
              sequence:
                - variables:
                    idx: "{{ repeat.index - 1 }}"
                    enabled: "{{ zones[idx].enabled }}"
                    runtime_used: "{{ (max_runtime if enabled else 0) if not aborted_now else ((now().timestamp() - (as_timestamp(now()) - (max_runtime*60))) / 60) }}"
                    consumption_used: "{{ (runtime_used | float(0)) * (zones[idx].flow | float(0)) if enable_consumption else 0 }}"
                - if: "{{ enabled }}"
                  then:
                    - service: input_text.set_value
                      data:
                        entity_id: "input_text.zone_{{ idx+1 }}_last_run"
                        value: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
                    - service: input_text.set_value
                      data:
                        entity_id: "input_text.zone_{{ idx+1 }}_last_status"
                        value: "{% if aborted_now %}Aborted{% else %}Completed{% endif %}"
                    - service: input_number.set_value
                      data:
                        entity_id: "input_number.zone_{{ idx+1 }}_last_duration"
                        value: "{{ (max_runtime if not aborted_now else runtime_used) | round(1) }}"
                    - service: input_number.set_value
                      data:
                        entity_id: "input_number.zone_{{ idx+1 }}_consumption"
                        value: "{{ consumption_used | round(2) }}"
                    - service: input_text.set_value
                      data:
                        entity_id: input_text.irrigation_debug_log
                        value: "Parallel: zone {{ idx+1 }} {% if aborted_now %}aborted{% else %}completed{% endif %} ({{ (max_runtime if not aborted_now else runtime_used) | round(1) }} min)"
                    - variables:
                        total_consumption: "{{ total_consumption + (consumption_used | float(0)) }}"

      - conditions: []
        sequence:
          - repeat:
              count: 4
              sequence:
                - variables:
                    idx: "{{ repeat.index - 1 }}"
                    z: "{{ zones[idx] }}"
                - if: "{{ z.enabled and z.switch != '' }}"
                  then:
                    - service: input_text.set_value
                      data:
                        entity_id: input_text.irrigation_debug_log
                        value: "Sequential: starting zone {{ idx+1 }} ({{ z.name }}) at {{ now().strftime('%H:%M:%S') }}"
                    - choose:
                        - conditions: "{{ notify_on_irrigation and notify_target != '' }}"
                          sequence:
                            - service: notify.notify
                              data:
                                target: "{{ notify_target }}"
                                title: "{{ notify_title }}"
                                message: "Starting {{ z.name }} for {{ z.duration }} minutes."
                                data:
                                  tag: "{{ notify_tag }}"
                                  sound: "{{ notify_sound }}"
                        - conditions: "{{ notify_on_irrigation and notify_target == '' }}"
                          sequence:
                            - service: notify.notify
                              data:
                                title: "{{ notify_title }}"
                                message: "Starting {{ z.name }} for {{ z.duration }} minutes."
                                data:
                                  tag: "{{ notify_tag }}"
                    - service: switch.turn_on
                      target:
                        entity_id: "{{ z.switch }}"
                    - variables:
                        poll_interval: 10
                        loops: "{{ (z.duration | int * 60 / poll_interval) | int if z.duration|int>0 else 0 }}"
                        start_ts: "{{ now().timestamp() }}"
                    - repeat:
                        count: "{{ loops if loops>0 else 1 }}"
                        sequence:
                          - choose:
                              - conditions:
                                  - condition: template
                                    value_template: >
                                      {{ (enable_rain_detection and rain_live_sensor != '' and is_state(rain_live_sensor,'on')) or
                                         (enable_water_level and water_level_sensor != '' and (states(water_level_sensor)|float(0)) < min_water_level) or
                                         (enable_soil_moisture and soil_moisture_sensor != '' and (states(soil_moisture_sensor)|float(0)) > soil_moisture_threshold)
                                      }}
                                sequence:
                                  - service: input_text.set_value
                                    data:
                                      entity_id: input_text.irrigation_debug_log
                                      value: "Sequential: zone {{ idx+1 }} aborted at {{ now().strftime('%H:%M:%S') }}"
                                  - stop: "Zone aborted"
                          - delay:
                              seconds: "{{ poll_interval }}"
                    - variables:
                        end_ts: "{{ now().timestamp() }}"
                        elapsed_min: "{{ ((end_ts - start_ts) / 60) | float(0) }}"
                        aborted: >
                          {{ (enable_rain_detection and rain_live_sensor != '' and is_state(rain_live_sensor,'on')) or
                             (enable_water_level and water_level_sensor != '' and (states(water_level_sensor)|float(0)) < min_water_level) or
                             (enable_soil_moisture and soil_moisture_sensor != '' and (states(soil_moisture_sensor)|float(0)) > soil_moisture_threshold)
                          }}
                        runtime_used: "{{ elapsed_min if aborted else z.duration | int }}"
                        consumption: "{{ (runtime_used | float(0)) * (z.flow | float(0)) if enable_consumption else 0 }}"
                    - service: switch.turn_off
                      target:
                        entity_id: "{{ z.switch }}"
                    - service: input_text.set_value
                      data:
                        entity_id: "input_text.zone_{{ idx+1 }}_last_run"
                        value: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
                    - service: input_number.set_value
                      data:
                        entity_id: "input_number.zone_{{ idx+1 }}_last_duration"
                        value: "{{ runtime_used | round(1) }}"
                    - service: input_number.set_value
                      data:
                        entity_id: "input_number.zone_{{ idx+1 }}_consumption"
                        value: "{{ consumption | round(2) }}"
                    - service: input_text.set_value
                      data:
                        entity_id: "input_text.zone_{{ idx+1 }}_last_status"
                        value: "{% if aborted %}Aborted{% else %}Completed{% endif %}"
                    - service: input_text.set_value
                      data:
                        entity_id: input_text.irrigation_debug_log
                        value: "Sequential: zone {{ idx+1 }} {% if aborted %}aborted{% else %}completed{% endif %} ({{ runtime_used | round(1) }} min)"
                    - variables:
                        total_consumption: "{{ total_consumption + (consumption | float(0)) }}"
                    - choose:
                        - conditions: "{{ aborted and notify_on_irrigation }}"
                          sequence:
                            - service: notify.notify
                              data:
                                title: "{{ notify_title }}"
                                message: "Zone aborted: {{ z.name }}"
                                target: "{{ notify_target }}"
                                data:
                                  tag: "{{ notify_tag }}"
  # Stop pump
  - if:
      - condition: template
        value_template: "{{ enable_pump and pump_switch != '' }}"
    then:
      - service: switch.turn_off
        target:
          entity_id: "{{ pump_switch }}"
      - service: input_text.set_value
        data:
          entity_id: input_text.irrigation_debug_log
          value: "Pump stopped at {{ now().strftime('%H:%M:%S') }}"

  # Summary notification
  - variables:
      summary: >
        {% for i in range(1,5) %}
        • Zone {{ i }} — {{ states('input_text.zone_' ~ i ~ '_last_status') }} — {{ states('input_number.zone_' ~ i ~ '_last_duration') }} min — {{ states('input_number.zone_' ~ i ~ '_consumption') }} gal
        {% endfor %}
  - choose:
      - conditions: "{{ notify_on_summary }}"
        sequence:
          - service: notify.notify
            data:
              title: "{{ notify_title }} — Summary ({{ trigger.id }})"
              message: >
                Irrigation summary (trigger: {{ trigger.id }}):
                {{ summary }}
                {% if notify_include_totals %}
                Total (cycle): {{ states('sensor.irrigation_total_consumption') }} gal
                Daily: {{ states('sensor.irrigation_daily') }}
                {% endif %}
              target: "{{ notify_target }}"

  # Auto-reset schedule helper
  - if:
      - condition: template
        value_template: "{{ enable_auto_reset and schedule_helper_entity != '' }}"
    then:
      - delay:
          seconds: "{{ auto_reset_delay }}"
      - service: homeassistant.turn_off
        target:
          entity_id: "{{ schedule_helper_entity }}"

  # Final debug write
  - service: input_text.set_value
    data:
      entity_id: input_text.irrigation_debug_log
      value: "Irrigation finished at {{ now().strftime('%Y-%m-%d %H:%M:%S') }} (total_consumption={{ total_consumption | round(2) }})"

mode: single
