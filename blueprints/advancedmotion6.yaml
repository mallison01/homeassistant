blueprint:
  name: Advanced Motion Activated Lighting
  description: >
    Turn lights on when motion is detected or doors open, with multiple optional conditions
    and occupancy detection to keep lights on while room is occupied.
  domain: automation
  input:
    # Primary Triggers
    binary_sensors:
      name: Motion Sensors or Door Sensors
      description: Select one or more motion sensors or door sensors that will trigger the automation
      selector:
        entity:
          multiple: true
          filter:
            - domain: binary_sensor
    
    # Light Control
    light_control_type:
      name: Light Control Type
      description: Choose whether to control individual lights/devices or use scenes
      selector:
        select:
          options:
            - label: "Individual Lights/Devices"
              value: "devices"
            - label: "Scenes"
              value: "scenes"
      default: "devices"
    
    lights:
      name: Lights to Turn On
      description: Select lights or devices to turn on (only used if Individual Lights/devices is selected above)
      default: []
      selector:
        entity:
          multiple: true
          filter:
            - domain: light
            - domain: switch
            - domain: fan
    
    on_scene:
      name: Scene to Activate
      description: Scene to activate when motion is detected (only used if Scenes is selected above)
      default: ""
      selector:
        entity:
          filter:
            - domain: scene
    
    off_scene:
      name: Scene to Deactivate
      description: Scene to activate when turning off (only used if Scenes is selected above)
      default: ""
      selector:
        entity:
          filter:
            - domain: scene
    
    # Timer
    timer_duration:
      name: Timer Duration
      description: How long to wait before turning off lights after all sensors are clear
      default:
        minutes: 5
      selector:
        duration:
    
    # Optional: Device Tracking
    enable_device_tracking:
      name: "🔍 Enable Device Tracking"
      description: Enable device presence checking
      default: false
      selector:
        boolean:
    
    tracked_device:
      name: "📱 Device to Track"
      description: Device that must be present/absent for automation to run (only used if Device Tracking is enabled)
      default: ""
      selector:
        entity:
          filter:
            - domain: device_tracker
            - domain: person
    
    device_zone:
      name: "🏠 Zone for Device Check"
      description: Zone where device should be present for automation to run (only used if Device Tracking is enabled)
      default: "home"
      selector:
        text:
    
    device_presence_required:
      name: "✅ Device Must Be Present"
      description: If enabled, device must be in zone. If disabled, device must NOT be in zone (only used if Device Tracking is enabled)
      default: true
      selector:
        boolean:
    
    # Optional: Time Restrictions
    enable_time_restriction:
      name: "🕐 Enable Time Restrictions"
      description: Only run automation between certain times
      default: false
      selector:
        boolean:
    
    start_time:
      name: "🌅 Start Time"
      description: Earliest time to run automation (only used if Time Restrictions is enabled)
      default: "00:00:00"
      selector:
        time:
    
    end_time:
      name: "🌙 End Time"
      description: Latest time to run automation (only used if Time Restrictions is enabled)
      default: "23:59:59"
      selector:
        time:
    
    # Optional: Day Restrictions
    enable_day_restriction:
      name: "📅 Enable Day of Week Restrictions"
      description: Only run automation on selected days
      default: false
      selector:
        boolean:
    
    allowed_days:
      name: "📋 Allowed Days"
      description: Days when automation is allowed to run (only used if Day Restrictions is enabled)
      default:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
      selector:
        select:
          multiple: true
          options:
            - label: "Monday"
              value: "mon"
            - label: "Tuesday"
              value: "tue"
            - label: "Wednesday"
              value: "wed"
            - label: "Thursday"
              value: "thu"
            - label: "Friday"
              value: "fri"
            - label: "Saturday"
              value: "sat"
            - label: "Sunday"
              value: "sun"
    
    # Optional: Light Sensor
    enable_light_sensor:
      name: "💡 Enable Light Sensor"
      description: Only run when light level is below threshold
      default: false
      selector:
        boolean:
    
    light_sensor:
      name: "🌞 Light Sensor"
      description: Sensor to check light level (only used if Light Sensor is enabled)
      default: ""
      selector:
        entity:
          filter:
            - device_class: illuminance
    
    light_threshold:
      name: "📊 Light Threshold"
      description: Light level below which automation runs (only used if Light Sensor is enabled)
      default: 100
      selector:
        number:
          min: 0
          max: 1000
          step: 10
          unit_of_measurement: lux
    
    # Optional: Occupancy Sensor
    enable_occupancy_sensor:
      name: "👤 Enable Occupancy Detection"
      description: Use additional sensor to detect room occupancy
      default: false
      selector:
        boolean:
    
    occupancy_sensors:
      name: "🚶 Occupancy Sensors"
      description: Additional sensors to detect room occupancy - lights stay on while these are active (only used if Occupancy Detection is enabled)
      default: []
      selector:
        entity:
          multiple: true
          filter:
            - domain: binary_sensor
    
    # Optional: Wait for All Sensors
    wait_for_all_sensors:
      name: Wait for All Sensors Clear
      description: Wait until ALL motion/door sensors are clear before starting timer
      default: true
      selector:
        boolean:
    
    # Optional: Extra Devices to Turn Off
    enable_extra_turnoff:
      name: "🔌 Enable Extra Turn Off"
      description: Turn off additional devices/scenes when timer expires
      default: false
      selector:
        boolean:
    
    extra_devices:
      name: "💡 Extra Devices to Turn Off"
      description: Additional devices to turn off when automation ends (only used if Extra Turn Off is enabled)
      default: []
      selector:
        entity:
          multiple: true
          filter:
            - domain: light
            - domain: switch
            - domain: fan
    
    extra_off_scenes:
      name: "🎬 Extra Scenes to Activate"
      description: Additional scenes to activate when automation ends (only used if Extra Turn Off is enabled)
      default: []
      selector:
        entity:
          multiple: true
          filter:
            - domain: scene

variables:
  binary_sensors: !input binary_sensors
  lights: !input lights
  on_scene: !input on_scene
  off_scene: !input off_scene
  light_control_type: !input light_control_type
  timer_duration: !input timer_duration
  enable_device_tracking: !input enable_device_tracking
  tracked_device: !input tracked_device
  device_zone: !input device_zone
  device_presence_required: !input device_presence_required
  enable_time_restriction: !input enable_time_restriction
  start_time: !input start_time
  end_time: !input end_time
  enable_day_restriction: !input enable_day_restriction
  allowed_days: !input allowed_days
  enable_light_sensor: !input enable_light_sensor
  light_sensor: !input light_sensor
  light_threshold: !input light_threshold
  enable_occupancy_sensor: !input enable_occupancy_sensor
  occupancy_sensors: !input occupancy_sensors
  wait_for_all_sensors: !input wait_for_all_sensors
  enable_extra_turnoff: !input enable_extra_turnoff
  extra_devices: !input extra_devices
  extra_off_scenes: !input extra_off_scenes

trigger:
  - platform: state
    entity_id: !input binary_sensors
    to: 
      - "on"
      - "open"
      - "detected"
    id: "motion_detected"
  - platform: state
    entity_id: !input binary_sensors
    to:
      - "off"
      - "closed"
      - "clear"
    id: "motion_cleared"

condition:
  # Check device tracking condition
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ not enable_device_tracking }}"
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ enable_device_tracking }}"
          - condition: template
            value_template: >
              {% if device_presence_required %}
                {{ is_state(tracked_device, device_zone) }}
              {% else %}
                {{ not is_state(tracked_device, device_zone) }}
              {% endif %}
  # Check time restriction
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ not enable_time_restriction }}"
      - condition: time
        after: !input start_time
        before: !input end_time
  # Check day restriction
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ not enable_day_restriction }}"
      - condition: template
        value_template: "{{ now().strftime('%a')|lower in allowed_days }}"
  # Check light sensor
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ not enable_light_sensor }}"
      - condition: template
        value_template: "{{ enable_light_sensor and light_sensor != '' }}"
      - condition: template
        value_template: >
          {{ enable_light_sensor and light_sensor != '' and 
             states(light_sensor)|float(1000) < light_threshold }}

action:
  - choose:
      # Motion/Door Detected - Turn On Lights
      - conditions:
          - condition: trigger
            id: "motion_detected"
        sequence:
          - choose:
              # Turn on individual devices
              - conditions:
                  - condition: template
                    value_template: "{{ light_control_type == 'devices' }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input lights
              # Activate scene
              - conditions:
                  - condition: template
                    value_template: "{{ light_control_type == 'scenes' and on_scene != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input on_scene
      
      # Motion/Door Cleared - Start Timer
      - conditions:
          - condition: trigger
            id: "motion_cleared"
        sequence:
          # Wait for all motion sensors to be clear if enabled
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ wait_for_all_sensors }}"
                sequence:
                  - wait_template: >
                      {% set sensors = binary_sensors if binary_sensors is iterable and binary_sensors is not string else [binary_sensors] %}
                      {{ sensors | select('is_state', ['on', 'open', 'detected']) | list | length == 0 }}
          
          # Wait for occupancy sensors to be clear if enabled
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ enable_occupancy_sensor }}"
                sequence:
                  - wait_template: >
                      {% set occ_sensors = occupancy_sensors if occupancy_sensors is iterable and occupancy_sensors is not string else [occupancy_sensors] %}
                      {{ occ_sensors | select('is_state', ['on', 'open', 'detected']) | list | length == 0 }}
          
          # Wait for timer duration
          - delay: !input timer_duration
          
          # Turn off lights or activate off scene
          - choose:
              # Turn off individual devices
              - conditions:
                  - condition: template
                    value_template: "{{ light_control_type == 'devices' }}"
                sequence:
                  - service: homeassistant.turn_off
                    target:
                      entity_id: !input lights
              # Activate off scene
              - conditions:
                  - condition: template
                    value_template: "{{ light_control_type == 'scenes' and off_scene != '' }}"
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input off_scene
          
          # Turn off extra devices if enabled
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ enable_extra_turnoff }}"
                sequence:
                  - service: homeassistant.turn_off
                    target:
                      entity_id: !input extra_devices
                  - service: scene.turn_on
                    target:
                      entity_id: !input extra_off_scenes

mode: restart
